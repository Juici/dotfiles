#!/usr/bin/env node

import { readFileSync } from "node:fs";
import process, { argv, env, stdin, stdout } from "node:process";
import { isatty } from "node:tty";

//////////////////////////////////////////////////

const isDisabled = "NO_COLOR" in env || argv.includes("--no-color");
const isForced = "FORCE_COLOR" in env || argv.includes("--color");
const isTermDumb = env.TERM === "dumb";

const isTermCompat = isatty(stdout.fd) && env.TERM && !isTermDumb;
const isColorSupported = !isDisabled && (isForced || isTermCompat);

const replaceClose = (
  index,
  text,
  close,
  replace,
  head = text.slice(0, index) + replace,
  tail = text.slice(index + close.length),
  next = tail.indexOf(close),
) => head + (next < 0 ? tail : replaceClose(next, tail, close, replace));

const clearBleed = (index, text, open, close, replace) =>
  index < 0 ? open + text + close : open + replaceClose(index, text, close, replace) + close;

const filterEmpty =
  (open, close, replace = open, at = open.length + 1) =>
  (text) => {
    text = String(text);

    return text ? clearBleed(text.indexOf(close, at), text, open, close, replace) : "";
  };

const color = isColorSupported
  ? (open, close, replace) => filterEmpty(`\x1b[${open}m`, `\x1b[${close}m`, replace)
  : () => String;

//////////////////////////////////////////////////

const bold = color(1, 22, "\x1b[22m\x1b[1m");

const red = color(31, 39);

//////////////////////////////////////////////////

function escape(c) {
  const escaped = JSON.stringify(c)
    .slice(1, -1)
    .replace(/\\u00([0-9a-f]{2})/giu, "\\x$1");
  return red(escaped);
}

//////////////////////////////////////////////////

let input;
try {
  input = readFileSync(stdin.fd, "utf8");
} catch (err) {
  if (err.code !== "EAGAIN") {
    throw err;
  }

  stdout.write(`${bold(`${red("error")}:`)} interactive stdin is not supported\n`);
  process.exit(1);
}

stdout.write(input.replace(/[\x00-\x09\x0b-\x1f\x7f]/gu, escape));

// vim:ft=javascript
