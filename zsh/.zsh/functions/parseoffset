#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Set the base and typically useful options
emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

# Run as script? ZSH_SCRIPT is a Zsh 5.3 addition
if [[ $0 != tw || -n $ZSH_SCRIPT ]]; then
    # Handle $0 according to the Zsh Plugin Standard:
    # http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}

    # Such global variable is expected to be typeset'd -g in the plugin.zsh
    # file. Here it's restored in case of the function being run as a script.
    typeset -gA Plugins
    Plugins[FUNCTIONS_DIR]=${0:h}
fi

# The script/function contents possibly using $Plugins[FUNCTIONS_DIR].

parseoffset() {
    # Don't leak match variables.
    local match mbegin mend

    # Input string.
    local input="$@"

    # Strip whitespace.
    input=${input//[[:space:]]/}

    # Make sure there are no decimal points.
    if [[ "$input" = *.* ]]; then
        print 'error: decimal points are not supported by parseoffset' >&2
        return 1
    fi

    # Substitute symbols (case-insensitively) for value in seconds, wrapping
    # substitutions in parentheses.
    #
    # Using substitutions with parentheses allows for the construction of more
    # complex expressions.
    input=${input//(#ib)([[:digit:]]##)s/${match[1]}}
    input=${input//(#ib)([[:digit:]]##)m/(${match[1]} * 60)}
    input=${input//(#ib)([[:digit:]]##)h/(${match[1]} * 3600)}
    input=${input//(#ib)([[:digit:]]##)d/(${match[1]} * 86400)}
    input=${input//(#ib)([[:digit:]]##)w/(${match[1]} * 86400 * 7)}
    input=${input//(#ib)([[:digit:]]##)y/(${match[1]} * 86400 * 365)}

    # Debug print statment.
    #print -r -- $input

    # Strip input of valid characters to search for invalid characters.
    local invalid=$input
    invalid=${invalid//[[:space:]]/}
    invalid=${invalid//[[:digit:]]/}
    invalid=${invalid//[\+\-\*\/\(\)]}

    if [[ -n "$invalid" ]]; then
        print "error: invalid characters in expression '$invalid'" >&2
        return 1
    fi

    # Evaluate the expression.
    integer offset=$(( input ))

    print -r -- "$offset"
}

parseoffset "$@"

# Use alternate marks [[[ and ]]] as the original ones can confuse nested
# substitutions, e.g.: ${${${VAR}}}

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
