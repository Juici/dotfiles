# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh tw=120 sw=2 sts=2 et foldmarker=[[[,]]]

builtin emulate -LR zsh ${=${options[xtrace]:#off}:+-o xtrace}
builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

# Run as script?
if [[ "$0" != bar || -n "$ZSH_SCRIPT" ]]; then
  # Standardized $0 Handling.
  # https://wiki.zshell.dev/community/zsh_plugin_standard#zero-handling
  0="${ZERO:-${${0:#$ZSH_ARGZERO}:-${(%):-%N}}}"
  0="${${(M)0:#/*}:-$PWD/$0}"

  fpath+=( "${0:h}" )
fi

bar() {
  integer BASE_BLOCK=16#2588 N_BLOCKS=8

  if (( $# < 1 )); then
    print -ru2 "usage: $0 <fraction> [width]"
    return 1
  fi

  float -F fraction=$1        # The fraction of the bar.
  integer full_width=${2:-4}  # The full width of the bar (default: 4).

  if (( fraction < 0 || fraction > 1 )); then
    print -Pru2 '%B%F{red}bar%f:%b value must be between 0 and 1'
    return 1
  fi

  float -F width=$(( full_width * fraction ))
  integer full_blocks=$width

  fraction=$(( width - full_blocks ))

  local s=''

  # Print full blocks.
  integer i
  for (( i = 0; i < full_blocks; i++ )); do
    s+="${(#)BASE_BLOCK}"
  done

  if (( fraction > 0 )); then
    integer fraction_block
    fraction_block=$(( (N_BLOCKS - 1) * fraction ))
    fraction_block=$(( [#16] BASE_BLOCK + ((N_BLOCKS - 1) - fraction_block) ))

    s+="${(#)fraction_block}"
  fi

  integer leftover=$(( full_width - width ))
  for (( i = 0; i < leftover; i++ )); do
    s+=' '
  done

  print -rn -- $s
}

bar "$@"
