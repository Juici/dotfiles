# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh tw=120 sw=2 sts=2 et foldmarker=[[[,]]]

builtin emulate -LR zsh ${=${options[xtrace]:#off}:+-o xtrace}
builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd

# Run as script?
if [[ "$0" != parseoffset || -n "$ZSH_SCRIPT" ]]; then
  # Standardized $0 Handling.
  # https://wiki.zshell.dev/community/zsh_plugin_standard#zero-handling
  0="${ZERO:-${${0:#$ZSH_ARGZERO}:-${(%):-%N}}}"
  0="${${(M)0:#/*}:-$PWD/$0}"

  fpath+=( "${0:h}" )
fi

parseoffset() {
  local MATCH REPLY; integer MBEGIN MEND
  local -a match mbegin mend reply

  # Input string.
  local input="$*"

  # Strip whitespace.
  input=${input//[[:space:]]/}

  # Pattern for a number.
  local num='[[:digit:]]##(.[[:digit:]]##|)'

  # Substitute symbols (case-insensitively) for value in seconds, wrapping
  # substitutions in parentheses.
  #
  # Using substitutions with parentheses allows for the construction of more
  # complex expressions.
  input=${input//(#ib)(${~num})s/${match[1]}}
  input=${input//(#ib)(${~num})m/(${match[1]} * 60)}
  input=${input//(#ib)(${~num})h/(${match[1]} * 3600)}
  input=${input//(#ib)(${~num})d/(${match[1]} * 86400)}
  input=${input//(#ib)(${~num})w/(${match[1]} * 86400 * 7)}
  input=${input//(#ib)(${~num})y/(${match[1]} * 86400 * 365)}

  # Strip input of valid characters to search for invalid characters.
  local invalid=$input
  invalid=${invalid//${~num}/}
  invalid=${invalid//[[:space:]]##/}
  invalid=${invalid//[\+\-\*\/\(\)]}

  if [[ -n "$invalid" ]]; then
    print -Pru2 "%F{red}parseoffset%f: invalid characters in expression '$invalid'"
    return 1
  fi

  # Evaluate the expression.
  integer offset=$(( input ))

  print -r -- "$offset"
}

parseoffset "$@"
