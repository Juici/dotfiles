#compdef rustc

_rustc() {
    local -a opt_flags opt_vals lints
    typeset -A opt_args

    opt_flags=(
        '(1 *)'{-h,--help}'[show help message]' # `--help` can be combined with `--verbose` and `-Z unstable-options`.
        '(1 *)'{-V,--version}'[show version information]' # `--version` can be combined with `--verbose`
        {-v,--verbose}'[use verbose output]'
        '-g[equivalent to -C debuginfo=2]'
        '-O[equivalent to -C opt-level=2]'
        '--test[build a test harness]'
    )

    opt_vals=(
        '-L+[add a directory to the library search path]: :_rustc_library_path'
        '-l+[link the generated crate(s) to the specifiy native library name]: :_rustc_library_link'
        '--cfg=[configure the compilation environment]:spec'
        '--crate-type=[comma separated list of types of crates for the compiler to emit]: :_rustc_crate_types'
        '--crate-name=[specify the name of the crate being built]:crate name'
        '--edition=[specify the edition of the compiler to use when compiling code]:edition:(2015 2018)'
        '--emit=[comma separated list of types of output for the compiler to emit]: :_rustc_emit_types'
        '--print=[compiler information to print on stdout]: :_rustc_print_info'
        '-o+[write output to filename]:filename'
        '--out-dir=[write output to compiler chosen filename in dir]:dir:_files -/'
        '--explain=[provide a detailed explanation of an error message]:error'
        '--target=[target triple for which the code is compiled]: :_rustc_target_triples'
        '--cap-lints=[sets the most restrictive lint level]:level:(allow warn deny forbid)'
        '--extern[specify where an external rust library is located]: :_rustc_extern_path'
        '--sysroot=[override the system root]:path:_files -/'
        '--error-format=[how errors and other messages are produced]:format:(human json short)'
        '--json=[configure the JSON output of the compiler]:config'
        '--color=[configure coloring of output]: :_rustc_color_types'
        '--pretty=[pretty-print the input instead of compiling]: :_rustc_pretty_types'
        '--remap-path-prefix[remap source names in all output (compiler messages and output files)]:from=to'
    )

    lints=(
        '*'{-W+,--warn=}'[set lint warning]: :_rustc_lint_options'
        '*'{-A+,--allow=}'[set lint allowed]: :_rustc_lint_options'
        '*'{-D+,--deny=}'[set lint denied]: :_rustc_lint_options'
        '*'{-F+,--forbid=}'[set lint forbidden]: :_rustc_lint_options'
    )

    _arguments -s -S $opt_flags $opt_vals $lints \
        '*-Z+[set unstable compiler options]: :_rustc_unstable_options' \
        '*'{-C+,--codegen}'[set codegen options]: :_rustc_codegen_options' \
        '1: :_files -g "*.rs"'
}

_rustc_library_path() {
    local files='path:_files -/'

    local -a kinds
    kinds=(
        "dependency:$files"
        "crate:$files"
        "native:$files"
        "framework:$files"
        "all:$files"
    )

    _values 'library kind' $kinds
    _files '-/'
}

_rustc_library_link() {
    # TODO: Look into searching library path to list libraries.

    local -a kinds
    kinds=(
        "static:"
        "framework:"
        "dylib:"
    )

    _values 'library kind' $kinds
}

_rustc_color_types() {
    local -a colors
    colors=(
        'auto[colorize (default if output goes to tty)]'
        'always[always colorize output]'
        'never[never colorize output]'
    )

    _values 'color' $colors
}

_rustc_pretty_types() {
    local -a pretty_types
    pretty_types=(
        'normal[un-annotated source]'
        'expanded[crates expanded]'
        'expanded,identified[fully parenthesized, AST nodes with IDs]'
    )

    _values 'type' $pretty_types
}

_rustc_crate_types() {
    local -a crate_types
    crate_types=( ${(z)${(f)"$(_call_program crate_types rustc --help)"/(#b)*'--crate-type ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values -s ',' 'crate type' $crate_types
}

_rustc_emit_types() {
    local -a emit_types
    emit_types=( ${(z)${(f)"$(_call_program emit_types rustc --help)"/(#b)*'--emit ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values -s ',' 'emit type' $emit_types
}

_rustc_print_info() {
    local -a print_types
    print_types=( ${(z)${(f)"$(_call_program print_types rustc --help)"/(#b)*'--print ['([a-z-|]##)']'*/${match[1]}}//|/ } )

    _values 'print type' $print_types
}

_rustc_target_triples() {
    local -a triples
    triples=( ${(z)$(_call_program triples rustc --print target-list)} )

    _values 'target triple' $triples
}

_rustc_extern_path() {
    # TODO: Add completion for path after `=`.
}

_rustc_lint_options() {
    local -a lints
    lints=( ${(f)"$(_call_program lints rustc -W help)"} )

    # Filter out non lint lines.
    lints=( ${(M)lints:#' '#[a-z-]##' '##(allow|warn|deny|forbid)' '##*} )
    # Escape `[` and `]`.
    lints=( ${${lints//'['/'\['}//']'/'\]'} )
    # Extract lint and description.
    lints=( ${lints/(#b)' '#([a-z-]##)' '##[a-z]##' '##(*)' '#/"${match[1]}[${match[2]}]"} )
    # Add help.
    lints+=( help )

    _values 'lint' $lints
}

_rustc_unstable_options() {
    local -a opts
    opts=( ${(f)"$(_call_program opts rustc -Z help)"} )

    # Filter out non option lines.
    opts=( ${(M)opts:#' '#'-Z'' '##*'--'*} )
    # Escape `[` and `]`.
    opts=( ${${opts//'['/'\['}//']'/'\]'} )
    # Extract option and description.
    opts=( ${opts/(#b)' '#'-Z'' '##([a-z-]##)'=val'' '##'--'' '##(*)' '#/"${match[1]}[${match[2]}]::val"} )
    # Add help.
    opts+=( help )

    # TODO: Add custom completions for known options.

    _values 'unstable option' $opts
}

_rustc_codegen_options() {
    local -a opts
    opts=( ${(f)"$(_call_program opts rustc -C help)"} )

    # Filter out non option lines.
    opts=( ${(M)opts:#' '#'-C'' '##*'--'*} )
    # Escape `[` and `]`.
    opts=( ${${opts//'['/'\['}//']'/'\]'} )
    # Extract option and description.
    opts=( ${opts/(#b)' '#'-C'' '##([a-z-]##)'=val'' '##'--'' '##(*)' '#/"${match[1]}[${match[2]}]::val"} )
    # Add help.
    opts+=( help )

    # TODO: Add custom completions for known options.

    _values 'codegen option' $opts
}

_rustc

