#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 4; indent-tabs-mode: nil; sh-basic-offset: 4; -*-

# Set the base and typically useful options
emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

# Run as script? ZSH_SCRIPT is a Zsh 5.3 addition
if [[ $0 != jump || -n $ZSH_SCRIPT ]]; then
    # Handle $0 according to the Zsh Plugin Standard:
    # http://zdharma.org/Zsh-100-Commits-Club/Zsh-Plugin-Standard.html
    0=${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}
    0=${${(M)0##/*}:-$PWD/$0}

    # Such global variable is expected to be typeset'd -g in the plugin.zsh
    # file. Here it's restored in case of the function being run as a script.
    typeset -gA Plugins
    Plugins[FUNCTIONS_DIR]=${0:h}

    print -P '%F{yellow}warning%f: jump cannot change directory when run as a script' >&2
fi

# The jump points file specifies directories and patterns for directories that
# can be jumped to.
.get_jump_points() {
    local jump_points_file="${1:-"$HOME/.jump_points"}"

    local -a jump_points
    if [[ -r "$jump_points_file" ]]; then
        jump_points=( ${(@Z:Cn:)"$(<"$jump_points_file")"} )
    fi
    print -r -- "${(@q)jump_points}"
}

jump() {
    emulate -L zsh
    setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes
    setopt autopushd nonomatch

    local -A opts
    zparseopts -D -E -M -A opts - l=-list -list e::=-edit -edit::

    if (( ${#opts} > 1 )); then
        print -r "error: conflicting arguments: ${(kj:, :)opts}"
        return 1
    fi

    # Flags.
    integer list=${+opts[--list]}
    integer edit=${+opts[--edit]}

    local jump_points_file="$HOME/.jump_points"

    if (( edit )); then
        ${EDITOR:-vim} "$jump_points_file"
        return 0
    fi

    # Shift arguments if first argument is '-' or '--'.
    if [[ "$1" = -(#c1,2) ]]; then
        shift
    fi

    # Target directory.
    local target="$1"

    # If target is empty and --list flag not enabled, error.
    if [[ -z "$target" ]] && (( ! list )); then
        print 'error: no jump target' >&2
        return 1
    fi

    local -A targets

    # Add directories at jump points.
    local jump_point
    for jump_point in ${(@Q)${(@z)"$(.get_jump_points "$jump_points_file")"}}; do
        local dir
        for dir in ${~jump_point}(N/); do
            targets+=( "${dir:t}" "$dir" )
        done
    done

    # Is the --list flag enabled.
    if (( list )); then
        local -a lines

        # List of lines to print.
        local k v
        for k v in "${(@kv)targets}"; do
            lines+=( "${k}=${v}" )
        done

        (( ${#lines} > 0 )) && print -r -- "${(F)lines}"
        return 0
    fi

    local resolved="${(QQ)targets[$target]}"
    # If the resolved path is empty, try searching case-insensitively.
    if [[ -z "$resolved" ]]; then
        resolved="${(vQQ)targets[(i)(#i)$target]}"
    fi

    # Check that a resolved target was found and that target isn't a directory.
    if [[ -z "$resolved" ]]; then
        print -r "error: could not find target: $target"
        return 1
    elif [[ ! -d "$resolved" ]]; then
        print -r "error: target '$target' is not a directory: $resolved"
        return 1
    fi

    cd -- "$resolved"
}

jump "$@"

# Use alternate marks [[[ and ]]] as the original ones can confuse nested
# substitutions, e.g.: ${${${VAR}}}

# vim:ft=zsh:tw=80:sw=4:sts=4:et:foldmarker=[[[,]]]
