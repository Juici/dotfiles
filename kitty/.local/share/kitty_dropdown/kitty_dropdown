#!/usr/bin/env zsh

emulate -LR zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops rcquotes

zmodload zsh/zutil

fmt_wid() {
    integer wid=$1

    printf '0x%08x' $wid
}

pass_fn() {
    local fn_name=$1
    local fn=$(typeset -f $fn_name)

    # Shift arguments.
    shift

    print -n -- "$fn;" "$fn_name" "$@"
}

# This function is evaluated by the tdrop script. We cannot be certain what
# shell will evaluate it, so it should try to be generic.
#
# The `$wid` variable is the window ID.
post_map() {
    if [ -z "$wid" ]; then
        return
    fi

    local wid=$(printf '0x%08x' $wid)

    wmctrl -i -r $wid -b add,above,sticky
    wmctrl -i -r $wid -b add,skip_taskbar,skip_pager

    local script=$1

    local on_blur=$2
    local blur_pid_file="/tmp/tdrop_$USER/kitty_on_blur"

    if [ -r "$blur_pid_file" ]; then
        # We can't rely on `$(<"$blur_pid_file")` here.
        local old_blur_pid=$(( $(cat "$blur_pid_file") ))

        # Kill old blur process.
        if [ $old_blur_pid -ne 0 ]; then
            kill $old_blur_pid 2>/dev/null
        fi
        rm -f "$blur_pid_file"
    fi

    # Run xdotool in background waiting for blur.
    xdotool behave $wid blur exec --sync "$on_blur" "$script" "$wid" "$blur_pid_file" >/dev/null &
    local blur_pid=$!
    # Store blur pid in file.
    echo -n "$blur_pid" >! "$blur_pid_file"
}

toggle_term() {
    local script=${ZSH_SCRIPT:P}
    local dir=${script:h}

    local on_blur="$dir/on_blur"

    # Hooks.
    local post_map=$(pass_fn post_map "$script" "$on_blur")

    # Window attributes.
    local class='kitty-tdrop'
    integer width=60
    integer height=65
    integer x=$(( (100 - width) / 2 ))
    integer y=0

    local tdrop="$dir/tdrop"
    local config="${XDG_CONFIG_HOME:-$HOME/.config}/kitty/kitty-drop.conf"
    local watcher="$dir/watcher.py"
    local start_dir="$HOME"

    # Run tdrop replacing this process.
    SHLVL=0 \
        exec "$tdrop" -ma \
        --class="$class" --name="$class" \
        -w "${width}%" -h "${height}%" -x "${x}%" -y "${y}%" \
        -P "$post_map" \
        kitty \
        --class="$class" --name="$class" \
        --config="$config" --directory="$start_dir" --watcher="$watcher"
}

# Returns 0 if dropdown should toggle, otherwise returns 1.
should_toggle() {
    local action=$1
    [[ "$action" = 'toggle' ]] && return 0

    # Is the a dropdown window ID file readable?
    local wid_file="/tmp/tdrop_$USER/kitty"
    [[ -r "$wid_file" ]] || return 0

    # Get the ID of the dropdown window.
    local wid=$(<$wid_file)
    [[ "$wid" = [[:digit:]]## ]] && wid=$(fmt_wid $wid) || return 0

    # Is the dropdown currently shown?
    wattr m $wid
    integer mapped=$?

    # Should the dropdown be shown?
    integer show=1
    [[ "$action" = 'hide' ]] && show=0

    return $(( mapped != show ))
}

tdrop-kitty() {
    local -A opts
    local -a o_action
    zparseopts -D -E -M -A opts - -show=o_action -hide=o_action -toggle=o_action

    # Get the action: 'show', 'hide', 'toggle'.
    local action=${${o_action[1]/#--/}:-toggle}

    should_toggle $action && toggle_term
}

tdrop-kitty "$@"
